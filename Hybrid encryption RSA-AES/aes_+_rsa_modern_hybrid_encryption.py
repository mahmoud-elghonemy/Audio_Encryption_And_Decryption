# -*- coding: utf-8 -*-
"""AES + RSA modern hybrid encryption.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f0bcDaDe88MvrR1_gVW8E98rPR7h0HUJ
"""

!pip install pycryptodome

from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
from Crypto.Random import get_random_bytes
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA

from scipy.io import wavfile
import numpy as np
import matplotlib.pyplot as plt
import random
import string
import IPython.display as ipd
import librosa
import librosa.display

path='/content/drive/MyDrive/data_set/RAVDESS_song/Actor_01/03-02-01-01-01-01-01.wav'
fs, data = wavfile.read(path)
plt.plot(data)            # fs = sampling frequency = 44.1kHz
plt.title("Original Audio Plot")

# Original Sound
samples, sample_rate = librosa.load(path)
ipd.Audio(samples, rate=sample_rate)

with open(path, 'rb') as fd:
    contents = fd.read()

#create random aes symmetric key
AES_key = get_random_bytes(16)   #16 bit = 128 bit encryption

with open('/content/drive/MyDrive/keys/pubkey.pem','rb') as f:
  pubkey = f.read()

RSA_key = RSA.importKey(pubkey)
RSA_cipher = PKCS1_OAEP.new(RSA_key)
e_AESkey=RSA_cipher.encrypt(AES_key)

data=contents

AEScipher=AES.new(AES_key,AES.MODE_EAX)

e_data,tag = AEScipher.encrypt_and_digest(data)

with open('encrypted_audio_RSA_AES.wav', 'wb') as fd:
    fd.write(e_data)

samples, sample_rate = librosa.load('encrypted_audio_RSA_AES.wav')
ipd.Audio(samples, rate=sample_rate)

#can't access

#write both encrypted AES key and encrypted file to one bundled file 
with open('bundle.enc','wb') as f:
  f.write(e_AESkey) #256 bytes
  f.write(AEScipher.nonce) #16 bytes
  f.write(tag) #16 bytes
  f.write(e_data)

"""# Decryption """

with open('bundle.enc','rb') as f:
  e_AESkey=f.read(128)
  nonce = f.read(16)
  tag = f.read(16)
  e_data = f.read()

with open('/content/drive/MyDrive/keys/privkey.pem') as f:
  key=f.read()

len(e_AESkey)

len(key)

privkey=RSA.importKey(key)
RSA_cipher=PKCS1_OAEP.new(privkey)
AES_key=RSA_cipher.decrypt(e_AESkey)

try:
  AEScipher=AES.new(AES_key,AES.MODE_EAX,nonce)
  data = AEScipher.decrypt_and_verify(e_data,tag)
except:
  print("Decryption or Authenticity failure")

with open('decrypted_audio_file.wav', 'wb') as fd:
    fd.write(data)
print("A file titled 'encrypted_audio_file.wav' is generated which is the encrypted audio to be communicated")

samples, sample_rate = librosa.load('decrypted_audio_file.wav')
ipd.Audio(samples, rate=sample_rate)