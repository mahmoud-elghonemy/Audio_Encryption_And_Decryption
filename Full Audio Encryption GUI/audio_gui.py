# -*- coding: utf-8 -*-
"""audio_GUI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WmwckB6mS3V4e2TnkhpQlXNYQGnWxORP
"""

!sudo apt-get install libportaudio2

!pip install sounddevice

!pip install crypto

!pip install pycryptodome

pip install pycryptodomex

pip install cryptography

pip install tinyec

pip install seccure

from google.colab import drive
drive.mount('/content/drive')

#import
from cryptography.fernet import Fernet
from scipy.io import wavfile
import numpy as np
import matplotlib.pyplot as plt
#import sounddevice as sd
import random
import string
from Crypto.Cipher import AES
from Crypto.Cipher import DES
from Crypto.Cipher import DES3
import IPython.display as ipd
import librosa
import librosa.display
import scipy.io.wavfile
import numpy
import time
import sys
from tqdm import tqdm
import seccure
from Crypto.Util.Padding import pad
from Crypto.Random import get_random_bytes
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA

fs, data = wavfile.read('/content/drive/MyDrive/data_set/RAVDESS_song/Actor_01/03-02-01-01-01-01-01.wav')
plt.plot(data)            # fs = sampling frequency = 44.1kHz
plt.title("Original Audio Plot")

def AES_func():



   #KEY &IV
  AES_KEY = ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for x in range(32))
  AES_IV = ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for x in range(16))
  
  print("AES Key is ", AES_KEY)
  print("AES Initialization vector is ", AES_IV)

  #Encryption
  with open('/content/drive/MyDrive/data_set/RAVDESS_song/Actor_01/03-02-01-01-01-01-01.wav', 'rb') as fd:
    contents = fd.read()

  encryptor = AES.new(AES_KEY.encode("utf-8"), AES.MODE_CFB, AES_IV.encode("utf-8"))
  encrypted_audio = encryptor.encrypt(contents)
  
  with open('EN.wav', 'wb') as fd:
   fd.write(encrypted_audio)
  print("A file titled 'EN.wav' is generated which is the encrypted audio to be communicated")


  #Decryption
  with open('EN.wav', 'rb') as fd:
    contents = fd.read()

  decryptor = AES.new(AES_KEY.encode("utf-8"), AES.MODE_CFB, AES_IV.encode("utf-8"))
  decrypted_audio = decryptor.decrypt(contents)

  with open('DE.wav', 'wb') as fd:
    fd.write(decrypted_audio)
  print("A file titled 'DE.wav' is generated which is the decrypted audio to be communicated")

  #plot decrypted audio
  fs, data = wavfile.read('/content/DE.wav')
  plt.plot(data)            # fs = sampling frequency = 44.1kHz
  plt.title("decrypted audio")

def DES_func():
  

  #KEY &IV
  DES_KEY = ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for x in range(8))
  DES_IV = ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for x in range(8))
  
  print("DES Key is ", DES_KEY)
  print("DES Initialization vector is ", DES_IV)

  #Encryption
  with open('/content/drive/MyDrive/data_set/RAVDESS_song/Actor_01/03-02-01-01-01-01-01.wav', 'rb') as fd:
    contents = fd.read()


  encryptor = DES.new(DES_KEY.encode("utf-8"), DES.MODE_CFB, DES_IV.encode("utf-8"))
  encrypted_audio = encryptor.encrypt(contents)
  
  with open('EN.wav', 'wb') as fd:
   fd.write(encrypted_audio)
  print("A file titled 'encrypted_audio_file.wav' is generated which is the encrypted audio to be communicated")
  

    #Decryption
  with open('EN.wav', 'rb') as fd:
    contents = fd.read()

  decryptor = DES.new(DES_KEY.encode("utf-8"), DES.MODE_CFB, DES_IV.encode("utf-8"))
  decrypted_audio = decryptor.decrypt(contents)

  with open('DE.wav', 'wb') as fd:
    fd.write(decrypted_audio)

  print("A file titled 'DE.wav' is generated which is the decrypted audio to be communicated")

  #plot decrypted audio
  fs, data = wavfile.read('/content/DE.wav')
  plt.plot(data)            # fs = sampling frequency = 44.1kHz
  plt.title("decrypted audio")

def FERNET_func():
   
   #generate key
   key = Fernet.generate_key()
   print("Key is ", key)  
  
   fernet = Fernet(key)
   with open('encryption_key.wav', 'wb') as filekey:
     filekey.write(key)

   with open('encryption_key.wav' , 'rb') as filekey:
     key=filekey.read() 
   

     #encryption
   with open('/content/drive/MyDrive/data_set/RAVDESS_song/Actor_01/03-02-01-01-01-01-01.wav', 'rb') as file:
     original = file.read()

   encrypted = fernet.encrypt(original)  

   with open('EN.wav', 'wb') as encrepted_file:
     encrepted_file.write(encrypted)
   print("A file titled 'encrypted_audio_file.wav' is generated which is the encrypted audio to be communicated")


   #decryption
   with open('EN.wav' , 'rb') as enc_file:
     encrypted = enc_file.read()

   decrypted = fernet.decrypt(encrypted)  

   with open('DE.wav', 'wb') as decrypted_file:
     decrypted_file.write(decrypted)

   print("A file titled 'DE.wav' is generated which is the decrypted audio to be communicated")

   #plot decrypted audio
   fs, data = wavfile.read('/content/DE.wav')
   plt.plot(data)            # fs = sampling frequency = 44.1kHz
   plt.title("decrypted audio")

# Triple DES
def DES3_func():

  """## Taking input"""

  path='/content/drive/MyDrive/data_set/RAVDESS_song/Actor_01/03-02-01-01-01-01-01.wav'
  fs, data = wavfile.read(path)
  plt.plot(data)            # fs = sampling frequency = 44.1kHz
  plt.title("Original Audio Plot")

  with open(path, 'rb') as fd:
      contents = fd.read()


  """## Playing that sound"""

  # Original Sound
  #samples, sample_rate = librosa.load(path)
  #ipd.Audio(samples, rate=sample_rate)

  """## Getting ready with DES"""

  
  while True:
    try:
      Key = DES3.adjust_key_parity(get_random_bytes(24))
      print("i")
      #Key = DES3.adjust_Key_parity(get_random_bytes(24))
      break
    except ValueError:
      pass

  def encrypt(msg):
    cipher =DES3.new(Key,DES3.MODE_EAX)
    nonce=cipher.nonce
    ciphertext=cipher.encrypt(msg)
    return nonce,ciphertext

  def decrypt(nonce,ciphertext):
   cipher=DES3.new(Key,DES3.MODE_EAX,nonce=nonce)
   plaintext=cipher.decrypt(ciphertext)
   return plaintext


  nonce,ciphertext = encrypt(contents)
  with open('/content/EN.wav', 'wb') as fd:
      fd.write(ciphertext)
  print("A file titled 'EN.wav' is generated which is the encrypted audio to be communicated")

  plaintext = decrypt(nonce,ciphertext)
  with open('/content/DE.wav', 'wb') as fd:
      fd.write(plaintext)
  print("A file titled 'DE.wav' is generated which is the decrypted audio to be communicated")

  samples, sample_rate = librosa.load('/content/DE.wav')
  ipd.Audio(samples, rate=sample_rate)

def RSA_func():

  start = time.time()

  #Encryption

  fs, data = scipy.io.wavfile.read('/content/RSA Audio encryption & decryption_8bitaudio.wav')
  print(data)
  print(fs)
  print(type(data))
  dataarray = data
  print(type(dataarray))
  a, b = dataarray.shape
  tup = (a, b)
  data = data.astype(numpy.int16)
  #data = numpy.asarray(data, dtype=numpy.int16)
  #print(data.flags)
  data.setflags(write=1)
  #print(data.flags)
  print((a,b))

  Time= numpy.linspace(0, len(data)/fs, num=len(data))
  plt.figure(1)
  plt.title('Signal Wave')
  plt.plot(Time, data) 
  plt.show()
  for i in range(0, tup[0]):
    for j in range(0, tup[1]):
      x = data[i][j] 
      x = ((pow(x,3)) % 25777)
      data[i][j] = x

  print(data)
  data = data.astype(numpy.int16)
  scipy.io.wavfile.write('EN.wav', fs, data)

  Time= numpy.linspace(0, len(data)/fs, num=len(data))
  plt.figure(2)
  plt.title('Encrypted Signal Wave')
  plt.plot(Time, data) 
  plt.show()

  end = time.time()
  ElspTime = (end-start)
  print('\n Total time taken from your life: ', +ElspTime, 'sec')


  start = time.time()

  #Decryption

  fs, data = scipy.io.wavfile.read('/content/EN.wav')
  print(data)
  print(fs)
  print(type(data))
  dataarray = data
  print(type(dataarray))
  a1, b1 = dataarray.shape
  tup1 = (a1, b1)
  data = data.astype(numpy.int16)
  #print(data.flags)
  data.setflags(write=1)
  #print(data.flags)
  print((a1,b1))
  numpy.savetxt('txtaudio.txt', data)
  data= data.tolist()

  for i1 in tqdm(range(len(data))):
    for j1 in (range(len(data[i1]))):
      x1 = data[i1][j1] 
      x1 = (pow(x1, 16971)%25777)
      data[i1][j1] = x1

  data = numpy.array(data)
  data = data.astype(numpy.uint8)
  print(data)
  scipy.io.wavfile.write('DE.wav', fs, data)

  end = time.time()
  ElspTime = (end-start)
  print('\n Total time taken from your life: ', +ElspTime, 'sec')

def ECC_func():
  ecc_key= str(seccure.passphrase_to_pubkey(b'my private key'))
  print("public Key is ", ecc_key)
  


  #Encryption

  #with open('/content/audio file.wav', 'rb') as fd:
  #contents = fd.read()

  encrypted_audio = seccure.encrypt_file('/content/drive/MyDrive/data_set/RAVDESS_song/Actor_01/03-02-01-01-01-01-01.wav',  '/content/EN.wav', ecc_key)
  print("A file titled 'EN.wav' is generated which is the encrypted audio to be communicated")



  #Decryption
  #with open('EN.wav', 'rb') as fd:
  #contents = fd.read()

  decrypted_audio = seccure.decrypt_file('/content/EN.wav',  '/content/DE.wav', b'my private key')
  print("A file titled 'DE.wav' is generated which is the decrypted audio to be communicated")

  #plot decrypted audio
  fs, data = wavfile.read('/content/DE.wav')
  plt.plot(data)            # fs = sampling frequency = 44.1kHz
  plt.title("decrypted audio")

from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
from Crypto.Random import get_random_bytes
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA

from scipy.io import wavfile
import numpy as np
import matplotlib.pyplot as plt
import random
import string
import IPython.display as ipd
import librosa
import librosa.display


def RSA_AES_func():
  path='/content/drive/MyDrive/data_set/RAVDESS_song/Actor_01/03-02-01-01-01-01-01.wav'
  fs, data = wavfile.read(path)
  plt.plot(data)            # fs = sampling frequency = 44.1kHz
  plt.title("Original Audio Plot")

  # Original Sound
  samples, sample_rate = librosa.load(path)
  ipd.Audio(samples, rate=sample_rate)

  with open(path, 'rb') as fd:
      contents = fd.read()

  #create random aes symmetric key
  AES_key = get_random_bytes(16)   #16 bit = 128 bit encryption

  with open('/content/drive/MyDrive/keys/pubkey.pem','rb') as f:
    pubkey = f.read()

  RSA_key = RSA.importKey(pubkey)
  RSA_cipher = PKCS1_OAEP.new(RSA_key)
  e_AESkey=RSA_cipher.encrypt(AES_key)

  data=contents

  AEScipher=AES.new(AES_key,AES.MODE_EAX)

  e_data,tag = AEScipher.encrypt_and_digest(data)

  with open('EN.wav', 'wb') as fd:
      fd.write(e_data)

  print("A file titled 'EN.wav' is generated which is the encrypted audio to be communicated")

  #write both encrypted AES key and encrypted file to one bundled file 
  with open('bundle.enc','wb') as f:
    f.write(e_AESkey) #256 bytes
    f.write(AEScipher.nonce) #16 bytes
    f.write(tag) #16 bytes
    f.write(e_data)

  """# Decryption """

  with open('bundle.enc','rb') as f:
    e_AESkey=f.read(128)
    nonce = f.read(16)
    tag = f.read(16)
    e_data = f.read()

  with open('/content/drive/MyDrive/keys/privkey.pem') as f:
    key=f.read()

  len(e_AESkey)

  len(key)

  privkey=RSA.importKey(key)
  RSA_cipher=PKCS1_OAEP.new(privkey)
  AES_key=RSA_cipher.decrypt(e_AESkey)

  try:
    AEScipher=AES.new(AES_key,AES.MODE_EAX,nonce)
    data = AEScipher.decrypt_and_verify(e_data,tag)
  except:
    print("Decryption or Authenticity failure")

  with open('DE.wav', 'wb') as fd:
      fd.write(data)
  print("A file titled 'encrypted_audio_file.wav' is generated which is the encrypted audio to be communicated")

algorithm = int(input(
                'Choose algorithm to use:\n\
            1 : AES\n\
            2 : DES\n\
            3 : Fernet\n\
            4 : DES3\n\
            5 : RSA\n\
            6 : ECC\n\
            7 : RSA with AES\n'))

#AES
if algorithm==1:

  AES_func()


#DES
if algorithm==2:

  DES_func()


#FERNET
if algorithm==3:

  FERNET_func()


#DES3
if algorithm==4:
 
 DES3_func()


#ECC
if algorithm==5:

  RSA_func()


#ECC
if algorithm==6:

  ECC_func()


#RSA with AES
if algorithm==7:

 RSA_AES_func()

fs, data = wavfile.read('/content/DE.wav')
plt.plot(data)            # fs = sampling frequency = 44.1kHz
plt.title("decrypted audio Plot")
data_1 = np.asarray(data, dtype = np.int32)