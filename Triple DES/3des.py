# -*- coding: utf-8 -*-
"""3DES.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zpTsqBUNHAfNtIn2BC69WVT-7IqUKNgw
"""

!pip install pycryptodome

"""# Importing dependencies"""

from scipy.io import wavfile
import numpy as np
import matplotlib.pyplot as plt
#import sounddevice as sd

import random
import string
from Crypto.Cipher import DES3

import IPython.display as ipd
import librosa
import librosa.display

"""## Taking input"""

from google.colab import drive
drive.mount('/content/drive')

path='/content/drive/MyDrive/data_set/RAVDESS_song/Actor_01/03-02-01-01-01-01-01.wav'
fs, data = wavfile.read(path)
plt.plot(data)            # fs = sampling frequency = 44.1kHz
plt.title("Original Audio Plot")

with open(path, 'rb') as fd:
    contents = fd.read()

contents

"""## Playing that sound"""

# Original Sound
samples, sample_rate = librosa.load(path)
ipd.Audio(samples, rate=sample_rate)

"""## Getting ready with DES"""

from Crypto.Random import get_random_bytes
while True:
  try:
    Key = DES3.adjust_key_parity(get_random_bytes(24))
    #Key = DES3.adjust_Key_parity(get_random_bytes(24))
    break
  except ValueError:
    pass

Key

def encrypt(msg):
  cipher =DES3.new(Key,DES3.MODE_EAX)
  nonce=cipher.nonce
  ciphertext=cipher.encrypt(msg)
  return nonce,ciphertext

def decrypt(nonce,ciphertext):
   cipher=DES3.new(Key,DES3.MODE_EAX,nonce=nonce)
   plaintext=cipher.decrypt(ciphertext)
   return plaintext

nonce,ciphertext = encrypt(contents)
with open('/content/drive/MyDrive/crypto/encrypted_audio_file.wav', 'wb') as fd:
    fd.write(ciphertext)

samples, sample_rate = librosa.load('/content/drive/MyDrive/crypto/encrypted_audio_file.wav')
ipd.Audio(samples, rate=sample_rate)

#can't access audio file

plaintext = decrypt(nonce,ciphertext)
with open('/content/drive/MyDrive/crypto/decrypted_audio_file.wav', 'wb') as fd:
    fd.write(plaintext)
print("A file titled 'encrypted_audio_file.wav' is generated which is the encrypted audio to be communicated")

samples, sample_rate = librosa.load('/content/drive/MyDrive/crypto/decrypted_audio_file.wav')
ipd.Audio(samples, rate=sample_rate)